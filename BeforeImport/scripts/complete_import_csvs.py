"""Complete import CSVs with additional fields required by task_import_database.md.

This script augments the existing CSV files generated by `generate_import_csvs.py`
with the extra columns expected by the Prisma schema:

1. country_regions → add [iso2, region_code, telephone_area_code]
2. state_provinces → add [region_code, abbreviation]
3. cities → add [region_code, zip_code, city_type, is_capital]

Currently only US‐centric data is filled automatically (since the sample data
only lists United States universities). Static lookup tables are embedded for
US states, capital status, and telephone codes. For rows outside the lookup,
values are left blank so analysts can review.

Usage:
    python complete_import_csvs.py --input-dir Data --output-dir Data

If --output-dir is omitted, augmented CSVs overwrite the originals.
"""
from __future__ import annotations

import argparse
import csv
import sys
from pathlib import Path
from typing import Dict, Tuple

import pandas as pd

# --------------------------- Static lookup tables --------------------------- #

US_TELEPHONE_CODE = "1"
US_ISO2 = "US"
US_REGION_CODE = "840"

# State → (abbreviation, region_code)
_STATE_INFO: Dict[str, Tuple[str, str]] = {
    "Alabama": ("AL", "US-AL"),
    "Alaska": ("AK", "US-AK"),
    "Arizona": ("AZ", "US-AZ"),
    "Arkansas": ("AR", "US-AR"),
    "California": ("CA", "US-CA"),
    "Colorado": ("CO", "US-CO"),
    "Connecticut": ("CT", "US-CT"),
    "Delaware": ("DE", "US-DE"),
    "District of Columbia": ("DC", "US-DC"),
    "Florida": ("FL", "US-FL"),
    "Georgia": ("GA", "US-GA"),
    "Hawaii": ("HI", "US-HI"),
    "Idaho": ("ID", "US-ID"),
    "Illinois": ("IL", "US-IL"),
    "Indiana": ("IN", "US-IN"),
    "Iowa": ("IA", "US-IA"),
    "Kansas": ("KS", "US-KS"),
    "Kentucky": ("KY", "US-KY"),
    "Louisiana": ("LA", "US-LA"),
    "Maine": ("ME", "US-ME"),
    "Maryland": ("MD", "US-MD"),
    "Massachusetts": ("MA", "US-MA"),
    "Michigan": ("MI", "US-MI"),
    "Minnesota": ("MN", "US-MN"),
    "Mississippi": ("MS", "US-MS"),
    "Missouri": ("MO", "US-MO"),
    "Montana": ("MT", "US-MT"),
    "Nebraska": ("NE", "US-NE"),
    "Nevada": ("NV", "US-NV"),
    "New Hampshire": ("NH", "US-NH"),
    "New Jersey": ("NJ", "US-NJ"),
    "New Mexico": ("NM", "US-NM"),
    "New York": ("NY", "US-NY"),
    "North Carolina": ("NC", "US-NC"),
    "North Dakota": ("ND", "US-ND"),
    "Ohio": ("OH", "US-OH"),
    "Oklahoma": ("OK", "US-OK"),
    "Oregon": ("OR", "US-OR"),
    "Pennsylvania": ("PA", "US-PA"),
    "Rhode Island": ("RI", "US-RI"),
    "South Carolina": ("SC", "US-SC"),
    "South Dakota": ("SD", "US-SD"),
    "Tennessee": ("TN", "US-TN"),
    "Texas": ("TX", "US-TX"),
    "Utah": ("UT", "US-UT"),
    "Vermont": ("VT", "US-VT"),
    "Virginia": ("VA", "US-VA"),
    "Washington": ("WA", "US-WA"),
    "West Virginia": ("WV", "US-WV"),
    "Wisconsin": ("WI", "US-WI"),
    "Wyoming": ("WY", "US-WY"),
}

# Abbreviation → full state name (reverse lookup for convenience)
_ABBR_TO_NAME = {abbr: name for name, (abbr, _code) in _STATE_INFO.items()}

# US State capitals for quick "is_capital" inference
_STATE_CAPITALS = {
    "Montgomery", "Juneau", "Phoenix", "Little Rock", "Sacramento", "Denver",
    "Hartford", "Dover", "Washington", "Tallahassee", "Atlanta", "Honolulu",
    "Boise", "Springfield", "Indianapolis", "Des Moines", "Topeka", "Frankfort",
    "Baton Rouge", "Augusta", "Annapolis", "Boston", "Lansing", "Saint Paul",
    "Jackson", "Jefferson City", "Helena", "Lincoln", "Carson City", "Concord",
    "Trenton", "Santa Fe", "Albany", "Raleigh", "Bismarck", "Columbus",
    "Oklahoma City", "Salem", "Harrisburg", "Providence", "Columbia",
    "Pierre", "Nashville", "Austin", "Salt Lake City", "Montpelier", "Richmond",
    "Olympia", "Charleston", "Madison", "Cheyenne",
}

# ------------------------------ Helpers ------------------------------------ #

def _augment_country_regions(df: pd.DataFrame) -> pd.DataFrame:
    if "country_region" not in df.columns:
        raise KeyError("Column 'country_region' missing in import_country_regions.csv")
    df["iso2"] = df["country_region"].apply(lambda _: US_ISO2)
    df["region_code"] = df["country_region"].apply(lambda _: US_REGION_CODE)
    df["telephone_area_code"] = df["country_region"].apply(lambda _: US_TELEPHONE_CODE)
    return df

def _augment_state_provinces(df: pd.DataFrame) -> pd.DataFrame:
    """Normalize state_province column to *full state name*.

    If the value is a 2-letter abbreviation, convert it to full name using
    `_ABBR_TO_NAME`. The `abbreviation` and `region_code` columns are populated
    using `_STATE_INFO`. Rows without a match are left unchanged (analyst review).
    """
    if "state_province" not in df.columns:
        raise KeyError("Column 'state_province' missing in import_state_provinces.csv")

    def _normalize(name: str) -> Tuple[str, str, str]:
        name = str(name).strip()
        full_name = name
        abbr = ""
        region_code = ""
        # If 2-letter abbreviation
        if len(name) == 2 and name.upper() in _ABBR_TO_NAME:
            full_name = _ABBR_TO_NAME[name.upper()]
        # Look up info using full_name
        if full_name in _STATE_INFO:
            abbr, region_code = _STATE_INFO[full_name]
        return full_name, abbr, region_code

    df[["state_province", "abbreviation", "region_code"]] = df["state_province"].apply(
        lambda n: pd.Series(_normalize(n))
    )
    return df

def _augment_cities(df: pd.DataFrame) -> pd.DataFrame:
    if "city" not in df.columns:
        raise KeyError("Column 'city' missing in import_cities.csv")
    df["region_code"] = ""  # left blank – can be filled later if needed
    df["zip_code"] = ""      # to be filled manually / via API later
    df["city_type"] = "normal"
    df["is_capital"] = df["city"].apply(lambda c: str(c) in _STATE_CAPITALS)
    return df

# ------------------------------ Main --------------------------------------- #

def main() -> None:
    ap = argparse.ArgumentParser(description="Augment import CSVs with extra columns for DB import.")
    ap.add_argument("--input-dir", default="Data", help="Directory containing import_*.csv files")
    ap.add_argument("--output-dir", default=None, help="Directory to write augmented CSVs (default: overwrite)")
    args = ap.parse_args()

    in_dir = Path(args.input_dir)
    out_dir = Path(args.output_dir) if args.output_dir else in_dir
    out_dir.mkdir(parents=True, exist_ok=True)

    tasks = [
        ("import_country_regions.csv", _augment_country_regions),
        ("import_state_provinces.csv", _augment_state_provinces),
        ("import_cities.csv", _augment_cities),
    ]

    for filename, func in tasks:
        fp = in_dir / filename
        if not fp.exists():
            print(f"[WARN] {fp} not found – skipping")
            continue
        df = pd.read_csv(fp, dtype=str).fillna("")
        df = func(df)
        out_path = out_dir / filename
        df.to_csv(out_path, index=False, quoting=csv.QUOTE_MINIMAL)
        print(f"[OK] {filename} augmented → {out_path}")

    # ---------------- Degrees ----------------
    deg_fp = out_dir / "import_degrees.csv"
    if not deg_fp.exists():
        pd.DataFrame([{"degree_name": d} for d in ["Bachelor", "Master", "Doctoral"]]).to_csv(
            deg_fp, index=False, quoting=csv.QUOTE_MINIMAL
        )
        print(f"[OK] import_degrees.csv created → {deg_fp}")

if __name__ == "__main__":
    main()
